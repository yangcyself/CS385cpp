project( processImage )
cmake_minimum_required(VERSION 2.8)
INCLUDE(FindProtobuf)

# SET (protobuf_MODULE_COMPATIBLE TRUE )

find_package( OpenCV 4 REQUIRED )
# find_package(PkgConfig REQUIRED)
# pkg_check_modules(Protobuf REQUIRED protobuf)
# find_package( Protobuf 3 REQUIRED )
# if (Protobuf_FOUND)
#         message(STATUS "Found Protobuf ${Protobuf_VERSION}, libs are: ${Protobuf_LIBRARY}; Include Dir is ${Protobuf_INCLUDE_DIRS}")
# endif(Protobuf_FOUND)
include_directories( ${OpenCV_INCLUDE_DIRS} )
# SET (Protobuf_INCLUDE_DIRS $(pkg-config --cflags  protobuf))
# SET (Protobuf_LIBRARIES protobuf)
# include_directories(${Protobuf_INCLUDE_DIRS})

SET (CMAKE_CXX_FLAGS -std=c++11)

# set (COMPILE_FLAGS std=c++11 )
# include_directories( /usr/local/opencv-4/include )
message(STATUS ${OpenCV_INCLUDE_DIRS} )
message(STATUS ${OpenCV_LIBS} )
message(STATUS --------------------)
message(STATUS ${CMAKE_MODULE_PATH})
# message(STATUS --------------------)
message(STATUS ${Protobuf_LIBRARIES})
add_executable( processImage processImage.cpp )
# target_link_libraries( processImage ${OpenCV_LIBS} )
target_link_libraries( processImage ${OpenCV_LIBS} )
# target_link_libraries( processImage /usr/local/opencv-4/lib )

# add_executable( hogCalculate hogCalculate.cpp protobuf/dataset.hog.pb.cc)
# target_link_libraries( hogCalculate ${OpenCV_LIBS} )
# target_link_libraries(hogCalculate ${Protobuf_LIBRARIES})
# add_executable( hogVisualize hogVisualize.cpp)
# target_link_libraries( hogVisualize ${OpenCV_LIBS} )