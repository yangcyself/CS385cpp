// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.hog.proto

#ifndef PROTOBUF_INCLUDED_dataset_2ehog_2eproto
#define PROTOBUF_INCLUDED_dataset_2ehog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dataset_2ehog_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dataset_2ehog_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dataset_2ehog_2eproto();
namespace dataset {
class ImageDescrip;
class ImageDescripDefaultTypeInternal;
extern ImageDescripDefaultTypeInternal _ImageDescrip_default_instance_;
class hog;
class hogDefaultTypeInternal;
extern hogDefaultTypeInternal _hog_default_instance_;
}  // namespace dataset
namespace google {
namespace protobuf {
template<> ::dataset::ImageDescrip* Arena::CreateMaybeMessage<::dataset::ImageDescrip>(Arena*);
template<> ::dataset::hog* Arena::CreateMaybeMessage<::dataset::hog>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dataset {

enum ImageDescrip_ClassType {
  ImageDescrip_ClassType_NEG = 0,
  ImageDescrip_ClassType_POS = 1
};
bool ImageDescrip_ClassType_IsValid(int value);
const ImageDescrip_ClassType ImageDescrip_ClassType_ClassType_MIN = ImageDescrip_ClassType_NEG;
const ImageDescrip_ClassType ImageDescrip_ClassType_ClassType_MAX = ImageDescrip_ClassType_POS;
const int ImageDescrip_ClassType_ClassType_ARRAYSIZE = ImageDescrip_ClassType_ClassType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageDescrip_ClassType_descriptor();
inline const ::std::string& ImageDescrip_ClassType_Name(ImageDescrip_ClassType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageDescrip_ClassType_descriptor(), value);
}
inline bool ImageDescrip_ClassType_Parse(
    const ::std::string& name, ImageDescrip_ClassType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageDescrip_ClassType>(
    ImageDescrip_ClassType_descriptor(), name, value);
}
enum ImageDescrip_DataType {
  ImageDescrip_DataType_TRAIN = 0,
  ImageDescrip_DataType_TEST = 1
};
bool ImageDescrip_DataType_IsValid(int value);
const ImageDescrip_DataType ImageDescrip_DataType_DataType_MIN = ImageDescrip_DataType_TRAIN;
const ImageDescrip_DataType ImageDescrip_DataType_DataType_MAX = ImageDescrip_DataType_TEST;
const int ImageDescrip_DataType_DataType_ARRAYSIZE = ImageDescrip_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ImageDescrip_DataType_descriptor();
inline const ::std::string& ImageDescrip_DataType_Name(ImageDescrip_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ImageDescrip_DataType_descriptor(), value);
}
inline bool ImageDescrip_DataType_Parse(
    const ::std::string& name, ImageDescrip_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ImageDescrip_DataType>(
    ImageDescrip_DataType_descriptor(), name, value);
}
// ===================================================================

class ImageDescrip :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataset.ImageDescrip) */ {
 public:
  ImageDescrip();
  virtual ~ImageDescrip();

  ImageDescrip(const ImageDescrip& from);

  inline ImageDescrip& operator=(const ImageDescrip& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImageDescrip(ImageDescrip&& from) noexcept
    : ImageDescrip() {
    *this = ::std::move(from);
  }

  inline ImageDescrip& operator=(ImageDescrip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ImageDescrip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImageDescrip* internal_default_instance() {
    return reinterpret_cast<const ImageDescrip*>(
               &_ImageDescrip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ImageDescrip* other);
  friend void swap(ImageDescrip& a, ImageDescrip& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImageDescrip* New() const final {
    return CreateMaybeMessage<ImageDescrip>(nullptr);
  }

  ImageDescrip* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImageDescrip>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImageDescrip& from);
  void MergeFrom(const ImageDescrip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageDescrip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ImageDescrip_ClassType ClassType;
  static const ClassType NEG =
    ImageDescrip_ClassType_NEG;
  static const ClassType POS =
    ImageDescrip_ClassType_POS;
  static inline bool ClassType_IsValid(int value) {
    return ImageDescrip_ClassType_IsValid(value);
  }
  static const ClassType ClassType_MIN =
    ImageDescrip_ClassType_ClassType_MIN;
  static const ClassType ClassType_MAX =
    ImageDescrip_ClassType_ClassType_MAX;
  static const int ClassType_ARRAYSIZE =
    ImageDescrip_ClassType_ClassType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ClassType_descriptor() {
    return ImageDescrip_ClassType_descriptor();
  }
  static inline const ::std::string& ClassType_Name(ClassType value) {
    return ImageDescrip_ClassType_Name(value);
  }
  static inline bool ClassType_Parse(const ::std::string& name,
      ClassType* value) {
    return ImageDescrip_ClassType_Parse(name, value);
  }

  typedef ImageDescrip_DataType DataType;
  static const DataType TRAIN =
    ImageDescrip_DataType_TRAIN;
  static const DataType TEST =
    ImageDescrip_DataType_TEST;
  static inline bool DataType_IsValid(int value) {
    return ImageDescrip_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    ImageDescrip_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    ImageDescrip_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    ImageDescrip_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return ImageDescrip_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return ImageDescrip_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return ImageDescrip_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float imghog = 2 [packed = true];
  int imghog_size() const;
  void clear_imghog();
  static const int kImghogFieldNumber = 2;
  float imghog(int index) const;
  void set_imghog(int index, float value);
  void add_imghog(float value);
  const ::google::protobuf::RepeatedField< float >&
      imghog() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_imghog();

  // required string imgpath = 1;
  bool has_imgpath() const;
  void clear_imgpath();
  static const int kImgpathFieldNumber = 1;
  const ::std::string& imgpath() const;
  void set_imgpath(const ::std::string& value);
  #if LANG_CXX11
  void set_imgpath(::std::string&& value);
  #endif
  void set_imgpath(const char* value);
  void set_imgpath(const char* value, size_t size);
  ::std::string* mutable_imgpath();
  ::std::string* release_imgpath();
  void set_allocated_imgpath(::std::string* imgpath);

  // optional .dataset.ImageDescrip.ClassType classtype = 3;
  bool has_classtype() const;
  void clear_classtype();
  static const int kClasstypeFieldNumber = 3;
  ::dataset::ImageDescrip_ClassType classtype() const;
  void set_classtype(::dataset::ImageDescrip_ClassType value);

  // optional .dataset.ImageDescrip.DataType datatype = 4;
  bool has_datatype() const;
  void clear_datatype();
  static const int kDatatypeFieldNumber = 4;
  ::dataset::ImageDescrip_DataType datatype() const;
  void set_datatype(::dataset::ImageDescrip_DataType value);

  // @@protoc_insertion_point(class_scope:dataset.ImageDescrip)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > imghog_;
  mutable std::atomic<int> _imghog_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr imgpath_;
  int classtype_;
  int datatype_;
  friend struct ::TableStruct_dataset_2ehog_2eproto;
};
// -------------------------------------------------------------------

class hog :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dataset.hog) */ {
 public:
  hog();
  virtual ~hog();

  hog(const hog& from);

  inline hog& operator=(const hog& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  hog(hog&& from) noexcept
    : hog() {
    *this = ::std::move(from);
  }

  inline hog& operator=(hog&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const hog& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const hog* internal_default_instance() {
    return reinterpret_cast<const hog*>(
               &_hog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(hog* other);
  friend void swap(hog& a, hog& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline hog* New() const final {
    return CreateMaybeMessage<hog>(nullptr);
  }

  hog* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<hog>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const hog& from);
  void MergeFrom(const hog& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(hog* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dataset.ImageDescrip image = 1;
  int image_size() const;
  void clear_image();
  static const int kImageFieldNumber = 1;
  ::dataset::ImageDescrip* mutable_image(int index);
  ::google::protobuf::RepeatedPtrField< ::dataset::ImageDescrip >*
      mutable_image();
  const ::dataset::ImageDescrip& image(int index) const;
  ::dataset::ImageDescrip* add_image();
  const ::google::protobuf::RepeatedPtrField< ::dataset::ImageDescrip >&
      image() const;

  // @@protoc_insertion_point(class_scope:dataset.hog)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::dataset::ImageDescrip > image_;
  friend struct ::TableStruct_dataset_2ehog_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageDescrip

// required string imgpath = 1;
inline bool ImageDescrip::has_imgpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageDescrip::clear_imgpath() {
  imgpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ImageDescrip::imgpath() const {
  // @@protoc_insertion_point(field_get:dataset.ImageDescrip.imgpath)
  return imgpath_.GetNoArena();
}
inline void ImageDescrip::set_imgpath(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  imgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dataset.ImageDescrip.imgpath)
}
#if LANG_CXX11
inline void ImageDescrip::set_imgpath(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  imgpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dataset.ImageDescrip.imgpath)
}
#endif
inline void ImageDescrip::set_imgpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  imgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dataset.ImageDescrip.imgpath)
}
inline void ImageDescrip::set_imgpath(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  imgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dataset.ImageDescrip.imgpath)
}
inline ::std::string* ImageDescrip::mutable_imgpath() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:dataset.ImageDescrip.imgpath)
  return imgpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageDescrip::release_imgpath() {
  // @@protoc_insertion_point(field_release:dataset.ImageDescrip.imgpath)
  if (!has_imgpath()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return imgpath_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageDescrip::set_allocated_imgpath(::std::string* imgpath) {
  if (imgpath != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  imgpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imgpath);
  // @@protoc_insertion_point(field_set_allocated:dataset.ImageDescrip.imgpath)
}

// repeated float imghog = 2 [packed = true];
inline int ImageDescrip::imghog_size() const {
  return imghog_.size();
}
inline void ImageDescrip::clear_imghog() {
  imghog_.Clear();
}
inline float ImageDescrip::imghog(int index) const {
  // @@protoc_insertion_point(field_get:dataset.ImageDescrip.imghog)
  return imghog_.Get(index);
}
inline void ImageDescrip::set_imghog(int index, float value) {
  imghog_.Set(index, value);
  // @@protoc_insertion_point(field_set:dataset.ImageDescrip.imghog)
}
inline void ImageDescrip::add_imghog(float value) {
  imghog_.Add(value);
  // @@protoc_insertion_point(field_add:dataset.ImageDescrip.imghog)
}
inline const ::google::protobuf::RepeatedField< float >&
ImageDescrip::imghog() const {
  // @@protoc_insertion_point(field_list:dataset.ImageDescrip.imghog)
  return imghog_;
}
inline ::google::protobuf::RepeatedField< float >*
ImageDescrip::mutable_imghog() {
  // @@protoc_insertion_point(field_mutable_list:dataset.ImageDescrip.imghog)
  return &imghog_;
}

// optional .dataset.ImageDescrip.ClassType classtype = 3;
inline bool ImageDescrip::has_classtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageDescrip::clear_classtype() {
  classtype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::dataset::ImageDescrip_ClassType ImageDescrip::classtype() const {
  // @@protoc_insertion_point(field_get:dataset.ImageDescrip.classtype)
  return static_cast< ::dataset::ImageDescrip_ClassType >(classtype_);
}
inline void ImageDescrip::set_classtype(::dataset::ImageDescrip_ClassType value) {
  assert(::dataset::ImageDescrip_ClassType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  classtype_ = value;
  // @@protoc_insertion_point(field_set:dataset.ImageDescrip.classtype)
}

// optional .dataset.ImageDescrip.DataType datatype = 4;
inline bool ImageDescrip::has_datatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageDescrip::clear_datatype() {
  datatype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::dataset::ImageDescrip_DataType ImageDescrip::datatype() const {
  // @@protoc_insertion_point(field_get:dataset.ImageDescrip.datatype)
  return static_cast< ::dataset::ImageDescrip_DataType >(datatype_);
}
inline void ImageDescrip::set_datatype(::dataset::ImageDescrip_DataType value) {
  assert(::dataset::ImageDescrip_DataType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  datatype_ = value;
  // @@protoc_insertion_point(field_set:dataset.ImageDescrip.datatype)
}

// -------------------------------------------------------------------

// hog

// repeated .dataset.ImageDescrip image = 1;
inline int hog::image_size() const {
  return image_.size();
}
inline void hog::clear_image() {
  image_.Clear();
}
inline ::dataset::ImageDescrip* hog::mutable_image(int index) {
  // @@protoc_insertion_point(field_mutable:dataset.hog.image)
  return image_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dataset::ImageDescrip >*
hog::mutable_image() {
  // @@protoc_insertion_point(field_mutable_list:dataset.hog.image)
  return &image_;
}
inline const ::dataset::ImageDescrip& hog::image(int index) const {
  // @@protoc_insertion_point(field_get:dataset.hog.image)
  return image_.Get(index);
}
inline ::dataset::ImageDescrip* hog::add_image() {
  // @@protoc_insertion_point(field_add:dataset.hog.image)
  return image_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dataset::ImageDescrip >&
hog::image() const {
  // @@protoc_insertion_point(field_list:dataset.hog.image)
  return image_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataset

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::dataset::ImageDescrip_ClassType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataset::ImageDescrip_ClassType>() {
  return ::dataset::ImageDescrip_ClassType_descriptor();
}
template <> struct is_proto_enum< ::dataset::ImageDescrip_DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dataset::ImageDescrip_DataType>() {
  return ::dataset::ImageDescrip_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dataset_2ehog_2eproto
