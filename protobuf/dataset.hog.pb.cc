// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dataset.hog.proto

#include "dataset.hog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dataset_2ehog_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ImageDescrip_dataset_2ehog_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dataset_2ehog_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_hog_dataset_2ehog_2eproto;
namespace dataset {
class ImageDescripDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageDescrip> _instance;
} _ImageDescrip_default_instance_;
class hogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<hog> _instance;
} _hog_default_instance_;
class hogdatasetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<hogdataset> _instance;
} _hogdataset_default_instance_;
}  // namespace dataset
static void InitDefaultsImageDescrip_dataset_2ehog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataset::_ImageDescrip_default_instance_;
    new (ptr) ::dataset::ImageDescrip();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dataset::ImageDescrip::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ImageDescrip_dataset_2ehog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsImageDescrip_dataset_2ehog_2eproto}, {}};

static void InitDefaultshog_dataset_2ehog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataset::_hog_default_instance_;
    new (ptr) ::dataset::hog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dataset::hog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_hog_dataset_2ehog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultshog_dataset_2ehog_2eproto}, {
      &scc_info_ImageDescrip_dataset_2ehog_2eproto.base,}};

static void InitDefaultshogdataset_dataset_2ehog_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dataset::_hogdataset_default_instance_;
    new (ptr) ::dataset::hogdataset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dataset::hogdataset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_hogdataset_dataset_2ehog_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultshogdataset_dataset_2ehog_2eproto}, {
      &scc_info_hog_dataset_2ehog_2eproto.base,}};

void InitDefaults_dataset_2ehog_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ImageDescrip_dataset_2ehog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_hog_dataset_2ehog_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_hogdataset_dataset_2ehog_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dataset_2ehog_2eproto[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dataset_2ehog_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dataset_2ehog_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dataset_2ehog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::dataset::ImageDescrip, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dataset::ImageDescrip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataset::ImageDescrip, imgpath_),
  PROTOBUF_FIELD_OFFSET(::dataset::ImageDescrip, imghog_),
  PROTOBUF_FIELD_OFFSET(::dataset::ImageDescrip, classtype_),
  PROTOBUF_FIELD_OFFSET(::dataset::ImageDescrip, datatype_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::dataset::hog, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dataset::hog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataset::hog, image_),
  PROTOBUF_FIELD_OFFSET(::dataset::hog, classtype_),
  PROTOBUF_FIELD_OFFSET(::dataset::hog, datatype_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::dataset::hogdataset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::dataset::hogdataset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dataset::hogdataset, data_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::dataset::ImageDescrip)},
  { 13, 21, sizeof(::dataset::hog)},
  { 24, 30, sizeof(::dataset::hogdataset)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::dataset::_ImageDescrip_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dataset::_hog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::dataset::_hogdataset_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dataset_2ehog_2eproto = {
  {}, AddDescriptors_dataset_2ehog_2eproto, "dataset.hog.proto", schemas,
  file_default_instances, TableStruct_dataset_2ehog_2eproto::offsets,
  file_level_metadata_dataset_2ehog_2eproto, 3, file_level_enum_descriptors_dataset_2ehog_2eproto, file_level_service_descriptors_dataset_2ehog_2eproto,
};

const char descriptor_table_protodef_dataset_2ehog_2eproto[] =
  "\n\021dataset.hog.proto\022\007dataset\"\177\n\014ImageDes"
  "crip\022\017\n\007imgpath\030\001 \002(\t\022\022\n\006imghog\030\002 \003(\002B\002\020"
  "\001\022%\n\tclasstype\030\003 \001(\0162\022.dataset.ClassType"
  "\022#\n\010datatype\030\004 \001(\0162\021.dataset.DataType\"w\n"
  "\003hog\022$\n\005image\030\001 \003(\0132\025.dataset.ImageDescr"
  "ip\022%\n\tclasstype\030\002 \001(\0162\022.dataset.ClassTyp"
  "e\022#\n\010datatype\030\003 \001(\0162\021.dataset.DataType\"("
  "\n\nhogdataset\022\032\n\004data\030\001 \003(\0132\014.dataset.hog"
  "*\035\n\tClassType\022\007\n\003NEG\020\000\022\007\n\003POS\020\001*\037\n\010DataT"
  "ype\022\t\n\005TRAIN\020\000\022\010\n\004TEST\020\001"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dataset_2ehog_2eproto = {
  false, InitDefaults_dataset_2ehog_2eproto, 
  descriptor_table_protodef_dataset_2ehog_2eproto,
  "dataset.hog.proto", &assign_descriptors_table_dataset_2ehog_2eproto, 384,
};

void AddDescriptors_dataset_2ehog_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dataset_2ehog_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dataset_2ehog_2eproto = []() { AddDescriptors_dataset_2ehog_2eproto(); return true; }();
namespace dataset {
const ::google::protobuf::EnumDescriptor* ClassType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dataset_2ehog_2eproto);
  return file_level_enum_descriptors_dataset_2ehog_2eproto[0];
}
bool ClassType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dataset_2ehog_2eproto);
  return file_level_enum_descriptors_dataset_2ehog_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ImageDescrip::InitAsDefaultInstance() {
}
class ImageDescrip::HasBitSetters {
 public:
  static void set_has_imgpath(ImageDescrip* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_classtype(ImageDescrip* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_datatype(ImageDescrip* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageDescrip::kImgpathFieldNumber;
const int ImageDescrip::kImghogFieldNumber;
const int ImageDescrip::kClasstypeFieldNumber;
const int ImageDescrip::kDatatypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageDescrip::ImageDescrip()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataset.ImageDescrip)
}
ImageDescrip::ImageDescrip(const ImageDescrip& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      imghog_(from.imghog_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  imgpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_imgpath()) {
    imgpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgpath_);
  }
  ::memcpy(&classtype_, &from.classtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&datatype_) -
    reinterpret_cast<char*>(&classtype_)) + sizeof(datatype_));
  // @@protoc_insertion_point(copy_constructor:dataset.ImageDescrip)
}

void ImageDescrip::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ImageDescrip_dataset_2ehog_2eproto.base);
  imgpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&classtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datatype_) -
      reinterpret_cast<char*>(&classtype_)) + sizeof(datatype_));
}

ImageDescrip::~ImageDescrip() {
  // @@protoc_insertion_point(destructor:dataset.ImageDescrip)
  SharedDtor();
}

void ImageDescrip::SharedDtor() {
  imgpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ImageDescrip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ImageDescrip& ImageDescrip::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ImageDescrip_dataset_2ehog_2eproto.base);
  return *internal_default_instance();
}


void ImageDescrip::Clear() {
// @@protoc_insertion_point(message_clear_start:dataset.ImageDescrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imghog_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    imgpath_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&classtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datatype_) -
        reinterpret_cast<char*>(&classtype_)) + sizeof(datatype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ImageDescrip::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ImageDescrip*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string imgpath = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("dataset.ImageDescrip.imgpath");
        object = msg->mutable_imgpath();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated float imghog = 2 [packed = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 18) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFloatParser;
          object = msg->mutable_imghog();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        do {
          msg->add_imghog(::google::protobuf::io::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 21 && (ptr += 1));
        break;
      }
      // optional .dataset.ClassType classtype = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::dataset::ClassType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_classtype(static_cast<::dataset::ClassType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .dataset.DataType datatype = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::dataset::DataType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_datatype(static_cast<::dataset::DataType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ImageDescrip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataset.ImageDescrip)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string imgpath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgpath().data(), static_cast<int>(this->imgpath().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dataset.ImageDescrip.imgpath");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float imghog = 2 [packed = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_imghog())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_imghog())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dataset.ClassType classtype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataset::ClassType_IsValid(value)) {
            set_classtype(static_cast< ::dataset::ClassType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dataset.DataType datatype = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataset::DataType_IsValid(value)) {
            set_datatype(static_cast< ::dataset::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataset.ImageDescrip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataset.ImageDescrip)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ImageDescrip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataset.ImageDescrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string imgpath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgpath().data(), static_cast<int>(this->imgpath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset.ImageDescrip.imgpath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->imgpath(), output);
  }

  // repeated float imghog = 2 [packed = true];
  if (this->imghog_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_imghog_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->imghog().data(), this->imghog_size(), output);
  }

  // optional .dataset.ClassType classtype = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->classtype(), output);
  }

  // optional .dataset.DataType datatype = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->datatype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dataset.ImageDescrip)
}

::google::protobuf::uint8* ImageDescrip::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataset.ImageDescrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string imgpath = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgpath().data(), static_cast<int>(this->imgpath().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dataset.ImageDescrip.imgpath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imgpath(), target);
  }

  // repeated float imghog = 2 [packed = true];
  if (this->imghog_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _imghog_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->imghog_, target);
  }

  // optional .dataset.ClassType classtype = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->classtype(), target);
  }

  // optional .dataset.DataType datatype = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->datatype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataset.ImageDescrip)
  return target;
}

size_t ImageDescrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataset.ImageDescrip)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string imgpath = 1;
  if (has_imgpath()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->imgpath());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float imghog = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->imghog_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _imghog_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .dataset.ClassType classtype = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->classtype());
    }

    // optional .dataset.DataType datatype = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ImageDescrip::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataset.ImageDescrip)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageDescrip* source =
      ::google::protobuf::DynamicCastToGenerated<ImageDescrip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataset.ImageDescrip)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataset.ImageDescrip)
    MergeFrom(*source);
  }
}

void ImageDescrip::MergeFrom(const ImageDescrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataset.ImageDescrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  imghog_.MergeFrom(from.imghog_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      imgpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imgpath_);
    }
    if (cached_has_bits & 0x00000002u) {
      classtype_ = from.classtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      datatype_ = from.datatype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ImageDescrip::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataset.ImageDescrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageDescrip::CopyFrom(const ImageDescrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataset.ImageDescrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageDescrip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ImageDescrip::Swap(ImageDescrip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageDescrip::InternalSwap(ImageDescrip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  imghog_.InternalSwap(&other->imghog_);
  imgpath_.Swap(&other->imgpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(classtype_, other->classtype_);
  swap(datatype_, other->datatype_);
}

::google::protobuf::Metadata ImageDescrip::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dataset_2ehog_2eproto);
  return ::file_level_metadata_dataset_2ehog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void hog::InitAsDefaultInstance() {
}
class hog::HasBitSetters {
 public:
  static void set_has_classtype(hog* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_datatype(hog* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hog::kImageFieldNumber;
const int hog::kClasstypeFieldNumber;
const int hog::kDatatypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hog::hog()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataset.hog)
}
hog::hog(const hog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      image_(from.image_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&classtype_, &from.classtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&datatype_) -
    reinterpret_cast<char*>(&classtype_)) + sizeof(datatype_));
  // @@protoc_insertion_point(copy_constructor:dataset.hog)
}

void hog::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_hog_dataset_2ehog_2eproto.base);
  ::memset(&classtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&datatype_) -
      reinterpret_cast<char*>(&classtype_)) + sizeof(datatype_));
}

hog::~hog() {
  // @@protoc_insertion_point(destructor:dataset.hog)
  SharedDtor();
}

void hog::SharedDtor() {
}

void hog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hog& hog::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_hog_dataset_2ehog_2eproto.base);
  return *internal_default_instance();
}


void hog::Clear() {
// @@protoc_insertion_point(message_clear_start:dataset.hog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&classtype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&datatype_) -
        reinterpret_cast<char*>(&classtype_)) + sizeof(datatype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* hog::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<hog*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .dataset.ImageDescrip image = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::dataset::ImageDescrip::_InternalParse;
          object = msg->add_image();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional .dataset.ClassType classtype = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::dataset::ClassType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_classtype(static_cast<::dataset::ClassType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .dataset.DataType datatype = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::dataset::DataType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_datatype(static_cast<::dataset::DataType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool hog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataset.hog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dataset.ImageDescrip image = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dataset.ClassType classtype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataset::ClassType_IsValid(value)) {
            set_classtype(static_cast< ::dataset::ClassType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dataset.DataType datatype = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dataset::DataType_IsValid(value)) {
            set_datatype(static_cast< ::dataset::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataset.hog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataset.hog)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void hog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataset.hog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dataset.ImageDescrip image = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->image(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .dataset.ClassType classtype = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->classtype(), output);
  }

  // optional .dataset.DataType datatype = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->datatype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dataset.hog)
}

::google::protobuf::uint8* hog::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataset.hog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dataset.ImageDescrip image = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->image_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->image(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .dataset.ClassType classtype = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->classtype(), target);
  }

  // optional .dataset.DataType datatype = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->datatype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataset.hog)
  return target;
}

size_t hog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataset.hog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dataset.ImageDescrip image = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->image_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->image(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .dataset.ClassType classtype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->classtype());
    }

    // optional .dataset.DataType datatype = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataset.hog)
  GOOGLE_DCHECK_NE(&from, this);
  const hog* source =
      ::google::protobuf::DynamicCastToGenerated<hog>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataset.hog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataset.hog)
    MergeFrom(*source);
  }
}

void hog::MergeFrom(const hog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataset.hog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_.MergeFrom(from.image_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      classtype_ = from.classtype_;
    }
    if (cached_has_bits & 0x00000002u) {
      datatype_ = from.datatype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void hog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataset.hog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hog::CopyFrom(const hog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataset.hog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hog::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->image())) return false;
  return true;
}

void hog::Swap(hog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hog::InternalSwap(hog* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&image_)->InternalSwap(CastToBase(&other->image_));
  swap(classtype_, other->classtype_);
  swap(datatype_, other->datatype_);
}

::google::protobuf::Metadata hog::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dataset_2ehog_2eproto);
  return ::file_level_metadata_dataset_2ehog_2eproto[kIndexInFileMessages];
}


// ===================================================================

void hogdataset::InitAsDefaultInstance() {
}
class hogdataset::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int hogdataset::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

hogdataset::hogdataset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dataset.hogdataset)
}
hogdataset::hogdataset(const hogdataset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dataset.hogdataset)
}

void hogdataset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_hogdataset_dataset_2ehog_2eproto.base);
}

hogdataset::~hogdataset() {
  // @@protoc_insertion_point(destructor:dataset.hogdataset)
  SharedDtor();
}

void hogdataset::SharedDtor() {
}

void hogdataset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const hogdataset& hogdataset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_hogdataset_dataset_2ehog_2eproto.base);
  return *internal_default_instance();
}


void hogdataset::Clear() {
// @@protoc_insertion_point(message_clear_start:dataset.hogdataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* hogdataset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<hogdataset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .dataset.hog data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::dataset::hog::_InternalParse;
          object = msg->add_data();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool hogdataset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dataset.hogdataset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dataset.hog data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dataset.hogdataset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dataset.hogdataset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void hogdataset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dataset.hogdataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dataset.hog data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->data(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dataset.hogdataset)
}

::google::protobuf::uint8* hogdataset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dataset.hogdataset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dataset.hog data = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->data_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->data(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dataset.hogdataset)
  return target;
}

size_t hogdataset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dataset.hogdataset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dataset.hog data = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->data_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->data(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void hogdataset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dataset.hogdataset)
  GOOGLE_DCHECK_NE(&from, this);
  const hogdataset* source =
      ::google::protobuf::DynamicCastToGenerated<hogdataset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dataset.hogdataset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dataset.hogdataset)
    MergeFrom(*source);
  }
}

void hogdataset::MergeFrom(const hogdataset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dataset.hogdataset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void hogdataset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dataset.hogdataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void hogdataset::CopyFrom(const hogdataset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dataset.hogdataset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool hogdataset::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void hogdataset::Swap(hogdataset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void hogdataset::InternalSwap(hogdataset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&data_)->InternalSwap(CastToBase(&other->data_));
}

::google::protobuf::Metadata hogdataset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dataset_2ehog_2eproto);
  return ::file_level_metadata_dataset_2ehog_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dataset
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::dataset::ImageDescrip* Arena::CreateMaybeMessage< ::dataset::ImageDescrip >(Arena* arena) {
  return Arena::CreateInternal< ::dataset::ImageDescrip >(arena);
}
template<> PROTOBUF_NOINLINE ::dataset::hog* Arena::CreateMaybeMessage< ::dataset::hog >(Arena* arena) {
  return Arena::CreateInternal< ::dataset::hog >(arena);
}
template<> PROTOBUF_NOINLINE ::dataset::hogdataset* Arena::CreateMaybeMessage< ::dataset::hogdataset >(Arena* arena) {
  return Arena::CreateInternal< ::dataset::hogdataset >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
